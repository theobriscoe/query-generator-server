<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
			http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<!--
		Notice the spring-beans-3-1.xsd defined in the schema location. You need this for the profile property in bean
	-->

	<!-- Configurer that replaces ${...} placeholders with values from a properties file -->
	<context:property-placeholder location="classpath:ticket-generator-server.properties" />
	<context:annotation-config />

	<!-- We're not doing a component scan b/c we're illustrating the IoC binding explicitly -->
	<!--	<context:component-scan base-package="com.aef" />-->

	<bean id="redisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:host-name="${redis.host}" p:port="${redis.port}" p:password="${redis.pass}" />

	<bean id="ticketBatchJsonSerializer" class="com.aef.model.TicketBatchJsonSerizalizer" />

	<bean id="ticketAckJsonSerializer" class="com.aef.model.TicketAckJsonSerializer" />

	<!-- We're using a specialized serializer -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate" p:connection-factory-ref="redisConnectionFactory"
		p:valueSerializer-ref="ticketBatchJsonSerializer" />

	<bean id="ticketAckRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"
		p:connection-factory-ref="redisConnectionFactory" p:valueSerializer-ref="ticketAckJsonSerializer" />

	<bean id="ticketQueueName" class="java.lang.String">
		<constructor-arg value="${ticket.queue.name}" />
	</bean>

	<bean id="ticketAckQueueName" class="java.lang.String">
		<constructor-arg value="${ticket.ack.queue.name}" />
	</bean>

	<!-- JMX STARTS HERE -->
	<bean id="registry" class="org.springframework.remoting.rmi.RmiRegistryFactoryBean">
        <property name="port" value="${rmi.server.port}" />
    </bean>
    
    <bean id="serverConnector" class="org.springframework.jmx.support.ConnectorServerFactoryBean" depends-on="registry">
        <property name="objectName" value="connector:name=rmi" />
        <property name="serviceUrl"
            value="service:jmx:rmi://${rmi.server}/jndi/rmi://${rmi.server}:${rmi.server.port}/TicketGeneratorServer" />
        <property name="daemon" value="true" />
        <property name="threaded" value="true" />
        <property name="server" ref="mBeanServer" />
        <!--  <property name="registrationBehaviorName" value="REGISTRATION_REPLACE_EXISTING" />-->
        <property name="registrationBehaviorName" value="REGISTRATION_IGNORE_EXISTING" />
        <property name="environmentMap">
            <map>
                <entry key="jmx.remote.jndi.rebind" value="true" />
            </map>
        </property>
    </bean>

	<bean id="mBeanServer" class="org.springframework.jmx.support.MBeanServerFactoryBean">
		<property name="locateExistingServerIfPossible" value="true" />
		<property name="registerWithFactory" value="true" />
	</bean>

	<bean id="jmxAttributeSource" class="org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource" />

	<bean id="namingStrategy" class="org.springframework.jmx.export.naming.MetadataNamingStrategy">
		<property name="attributeSource" ref="jmxAttributeSource" />
	</bean>

	<!-- <bean id="assembler" class="org.springframework.jmx.CachingMetadataMBeanInfoAssembler">  -->
	<bean id="assembler" class="org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler">
		<property name="attributeSource" ref="jmxAttributeSource" />
	</bean>

	<bean id="exporter" class="org.springframework.jmx.export.MBeanExporter" lazy-init="false">
		<property name="assembler" ref="assembler" />
		<property name="namingStrategy" ref="namingStrategy" />
		<property name="autodetect" value="false" />
		<property name="beans">
			<map>
				<entry key="TicketGeneratorServer:type=TicketGeneratorServer" value-ref="ticketGeneratorServerMBean" />
				<!-- <entry key="TicketGeneratorServer:type=TicketAckProcessor" value-ref="ticketAckProcessorMBean" /> -->
			</map>
		</property>
		<property name="registrationBehaviorName" value="REGISTRATION_REPLACE_EXISTING" />
	</bean>

	<bean id="ticketGeneratorServerMBean" class="com.aef.jmx.TicketGeneratorMBean">
		<property name="service" ref="ticketGenerator" />
	</bean>

	<bean id="ticketAckProcessorMBean" class="com.aef.jmx.TicketAckProcessorMBean">
		<property name="service" ref="ticketAckProcessor" />
	</bean>
	
	<!-- MH ADD, WOULD NOT MVN PACKAGE -->
	<bean id="ticketAckProcessor" class="com.aef.TicketAckProcessorImpl">
		<property name="ticketAckQueue" ref="ticketAckQueue" />
		<property name="ticketService" ref="ticketService" />
	</bean>
	
	<bean id="ticketAckQueue" class="org.springframework.data.redis.support.collections.DefaultRedisList">
		<constructor-arg ref="ticketAckRedisTemplate" />
		<constructor-arg value="${ticket.ack.queue.name}" />
	</bean>
	<!--  END JMX -->

    
	<beans profile="dev">
		<bean id="ticketGenerator" class="com.aef.TicketGeneratorImpl">
			<property name="ticketQueue" ref="ticketQueue" />
		</bean>
		<!-- This is used for testing -->
		<bean id="ticketQueue" class="com.aef.model.TicketBatchQueue" />
		<!--  we don't set any properties here so we can test it using mocks -->
		<bean id="ticketService" class="com.aef.TicketServiceImpl" />
	</beans>

	<beans profile="int-no-db">
		<bean id="ticketGenerator" class="com.aef.TicketGeneratorImpl">
			<property name="ticketQueue" ref="ticketQueue" />
		</bean>
		<bean id="ticketService" class="com.aef.TicketServiceImpl" />

		<bean id="ticketQueue" class="org.springframework.data.redis.support.collections.DefaultRedisList">
			<constructor-arg ref="redisTemplate" />
			<constructor-arg value="${ticket.queue.name}" />
		</bean>

		<!-- This one is a standard String KV Template used to get test results -->
		<bean id="testRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"
			p:connection-factory-ref="redisConnectionFactory" />

	</beans>

	<beans profile="int-db-embedded">
		<!-- Create an H2 embedded database -->
		<bean id="dataSource" class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
			<constructor-arg>
				<bean class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
					<property name="driverClass" value="org.h2.Driver" />
					<property name="url" value="jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;MODE=Oracle;TRACE_LEVEL_SYSTEM_OUT=2" />
				</bean>
			</constructor-arg>
		</bean>

		<!-- Use spring to initialize out embedded DB -->
		<jdbc:initialize-database data-source="dataSource">
			<jdbc:script location="classpath:com/aef/sql/db-schema.sql" />
			<jdbc:script location="classpath:com/aef/sql/db-test-data.sql" />
		</jdbc:initialize-database>

		<!-- FOR REFERENCE -->
		<!-- http://www.developersbook.com/ibatis/iBatis-tutorials/iBatis-tutorials.php -->
		<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
			<property name="configLocation" value="classpath:sql-map/sql-map-config.xml" />
			<property name="dataSource" ref="dataSource" />
		</bean>

		<!--  Start defining our objects -->
		<bean id="ticketGenerator" class="com.aef.TicketGeneratorImpl">
			<property name="ticketQueue" ref="ticketQueue" />
			<property name="ticketService" ref="ticketService" />
		</bean>

		<bean id="ticketAckProcessor" class="com.aef.TicketAckProcessorImpl">
			<property name="ticketAckQueue" ref="ticketAckQueue" />
			<property name="ticketService" ref="ticketService" />
		</bean>

		<bean id="ticketService" class="com.aef.TicketServiceImpl">
			<property name="sqlMapClient" ref="sqlMapClient" />
			<property name="listName" value="TicketOrder.getTicketsDbEmbedded" />
		</bean>

		<bean id="ticketQueue" class="org.springframework.data.redis.support.collections.DefaultRedisList">
			<constructor-arg ref="redisTemplate" />
			<constructor-arg value="${ticket.queue.name}" />
		</bean>

		<bean id="ticketAckQueue" class="org.springframework.data.redis.support.collections.DefaultRedisList">
			<constructor-arg ref="ticketAckRedisTemplate" />
			<constructor-arg value="${ticket.ack.queue.name}" />
		</bean>

		<!-- This one is a standard String KV Template used to get test results -->
		<bean id="testRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"
			p:connection-factory-ref="redisConnectionFactory" />
	</beans>

	<beans profile="int-test-db">
		<!-- Define the real data source here -->
		<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
			<property name="driverClassName" value="${jdbc.driverClassName}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />

		</bean>

		<!-- FOR REFERENCE -->
		<!-- http://www.developersbook.com/ibatis/iBatis-tutorials/iBatis-tutorials.php -->
		<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
			<property name="configLocation" value="classpath:/sql-map/sql-map-config.xml" />
			<property name="dataSource" ref="dataSource" />
		</bean>

		<bean id="ticketGenerator" class="com.aef.TicketGeneratorImpl">
			<property name="ticketQueue" ref="ticketQueue" />
			<property name="ticketService" ref="ticketService" />
		</bean>

		<bean id="ticketQueue" class="org.springframework.data.redis.support.collections.DefaultRedisList">
			<constructor-arg ref="redisTemplate" />
			<constructor-arg value="${ticket.queue.name}" />
		</bean>

		<bean id="ticketService" class="com.aef.TicketServiceImpl">
			<property name="sqlMapClient" ref="sqlMapClient" />
			<property name="listName" value="TicketOrder.getTicketsTestDB" />
		</bean>

		<!-- This one is a standard String KV Template used to get test results -->
		<bean id="testRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"
			p:connection-factory-ref="redisConnectionFactory" />
	</beans>

	<beans profile="prod">
		<!-- Define the real data source here -->
		<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
			<property name="driverClassName" value="${jdbc.driverClassName}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
		</bean>

		<!-- FOR REFERENCE -->
		<!-- http://www.developersbook.com/ibatis/iBatis-tutorials/iBatis-tutorials.php -->
		<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
			<property name="configLocation" value="classpath:/sql-map/sql-map-config.xml" />
			<property name="dataSource" ref="dataSource" />
		</bean>

		<bean id="ticketAckProcessor" class="com.aef.TicketAckProcessorImpl">
			<property name="ticketAckQueue" ref="ticketAckQueue" />
			<property name="ticketService" ref="ticketService" />
		</bean>
		<bean id="ticketAckQueue" class="org.springframework.data.redis.support.collections.DefaultRedisList">
			<constructor-arg ref="ticketAckRedisTemplate" />
			<constructor-arg value="${ticket.ack.queue.name}" />
		</bean>

		<bean id="ticketGenerator" class="com.aef.TicketGeneratorImpl">
			<property name="ticketQueue" ref="ticketQueue" />
			<property name="ticketService" ref="ticketService" />
		</bean>

		<bean id="ticketQueue" class="org.springframework.data.redis.support.collections.DefaultRedisList">
			<constructor-arg ref="redisTemplate" />
			<constructor-arg value="${ticket.queue.name}" />
		</bean>

		<bean id="ticketService" class="com.aef.TicketServiceImpl">
			<property name="sqlMapClient" ref="sqlMapClient" />
		</bean>

		<!-- This one is a standard String KV Template used to get test results -->
		<bean id="testRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"
			p:connection-factory-ref="redisConnectionFactory" />

	</beans>

	<beans profile="prodTest">
		<!-- Define the real data source here -->
		<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
			<property name="driverClassName" value="${jdbc.driverClassName}" />
			<property name="url" value="${jdbc.url}" />
			<property name="username" value="${jdbc.username}" />
			<property name="password" value="${jdbc.password}" />
		</bean>

		<!-- FOR REFERENCE -->
		<!-- http://www.developersbook.com/ibatis/iBatis-tutorials/iBatis-tutorials.php -->
		<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
			<property name="configLocation" value="classpath:/sql-map/sql-map-config.xml" />
			<property name="dataSource" ref="dataSource" />
		</bean>

		<bean id="ticketGenerator" class="com.aef.TicketGeneratorImpl">
			<property name="ticketQueue" ref="ticketQueue" />
			<property name="ticketService" ref="ticketService" />
		</bean>

		<bean id="ticketQueue" class="org.springframework.data.redis.support.collections.DefaultRedisList">
			<constructor-arg ref="redisTemplate" />
			<constructor-arg value="${ticket.queue.name}" />
		</bean>

		<bean id="ticketService" class="com.aef.TicketServiceImpl">
			<property name="sqlMapClient" ref="sqlMapClient" />
			<property name="listName" value="TicketOrder.getTicketsTestDB" />
		</bean>

		<!-- This one is a standard String KV Template used to get test results -->
		<bean id="testRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"
			p:connection-factory-ref="redisConnectionFactory" />


	</beans>
</beans>