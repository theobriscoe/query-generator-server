/*
 * Copyright (c) 2012 Automated Execution Framework, LLC. 
 * See the LICENSE file for redistribution and use restrictions.
 * 
 * $Id$
 * $Author$ 
 */
package com.aef;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.aef.model.TicketBatch;
import com.aef.model.TicketOrder;

/**
 * This is the same as {@link TicketGeneratorServerDevTest} but uses Springockito to inject
 * the ticket service
 * 
 * @author agile-development-group
 * 
 */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations={"/spring/applicationContext-ticket-generator-server-springockito.xml"})
public class TicketGeneratorServerDevSpringockitoTest {

	private static final Log LOGGER = LogFactory.getLog(TicketGeneratorServerDevSpringockitoTest.class);
	@Autowired
	private TicketGeneratorImpl ticketGenerator;
	
	@Autowired
	private TicketService ticketService;
	
	@Autowired
	private String ticketQueueName;
	
	// let's use real POJOs for domain and model objects
	private List<TicketOrder> ticketList;
	
	// NOTE: All test classes will use the ticket-generator-server.properties from test/resoures
	//      and the log4j.properties
	@Before
	public void setUp() {		
		ticketGenerator.setSleepInterval(2);
		ticketGenerator.setTicketService(ticketService);
	
		LOGGER.info("testQueueName: "+ ticketQueueName);
		
		ticketList = TestTools.createTestTicketOrders();
	}
	
	@Test
	public void doTest() throws Exception {
		//-- Given
		
		//-- When
		// let's send process one batch
		when(ticketService.getOpenTickets()).thenReturn(ticketList);
		
		ticketGenerator.startAndWait();	
				
		// give the system some time to do something
		Thread.sleep(2 * 1000);
		
		ticketGenerator.stopAndWait();
		
		//-- THEN
		//-- CHECK YOUR RESULTS
		// now check to see if it did anything
		assertEquals(1, ticketGenerator.getTicketBatchSendCount());
		
		// ask to fake tickQueue if the order got there
		// for redis this would be serialized
		TicketBatch ticketBatch = ticketGenerator.getTicketQueue().poll();
		
		TestTools.verifyTestTicketBatch(ticketBatch);
	}
}
